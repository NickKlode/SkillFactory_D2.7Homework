from rating.models import *

1.Создать двух пользователей (с помощью метода User.objects.create_user).

user1 = User.objects.create(username='1stUser', first_name='Nik') 
user2 = User.objects.create(username='2ndUser', first_name='Ita')

2.Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

3.Добавить 4 категории в модель Category.

Category.objects.create(name='Sport')
Category.objects.create(name='Education') 
Category.objects.create(name='Work')      
Category.objects.create(name='Holidays')  

4.Добавить 2 статьи и 1 новость.

Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='1stUser')), categoryType='AR', title='Article Title 1', text='Article Text 1')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='1stUser')), categoryType='AR', title='Article Title 2', text='Article Text 2')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='2ndUser')), categoryType='NW', title='News Title 2', text='News Text 2')

5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2) 
p3 = Post.objects.get(pk=3) 
c1 = Category.objects.get(pk=1)
c2 = Category.objects.get(pk=2) 
c3 = Category.objects.get(pk=3) 
c4 = Category.objects.get(pk=4)
p1.postCategory.add(c1, c2) 
p2.postCategory.add(c2, c3) 
p3.postCategory.add(c3, c4) 

6.Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentUser=User.objects.get(username='1stUser'), commentPost=Post.objects.get(pk=1), text='Comment Text 1')
Comment.objects.create(commentUser=User.objects.get(username='1stUser'), commentPost=Post.objects.get(pk=2), text='Comment Text 2')
Comment.objects.create(commentUser=User.objects.get(username='2ndUser'), commentPost=Post.objects.get(pk=2), text='Comment Text 3')
Comment.objects.create(commentUser=User.objects.get(username='2ndUser'), commentPost=Post.objects.get(pk=3), text='Comment Text 4')

7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).dislike() 

Post.objects.get(pk=2).dislike() 
Post.objects.get(pk=2).dislike()
Post.objects.get(pk=2).like()  

Post.objects.get(pk=3).like() 

Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()

Comment.objects.get(pk=2).like() 
Comment.objects.get(pk=2).like() 
Comment.objects.get(pk=2).dislike() 

Comment.objects.get(pk=3).dislike() 
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=3).dislike()

Comment.objects.get(pk=4).like()

8.Обновить рейтинги пользователей.

Author.objects.get(authorUser=User.objects.get(username='1stUser')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='2ndUser')).update_rating() 

9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

best = Author.objects.all().order_by('-ratingAuthor').values('authorUser__username', 'ratingAuthor')[0] 
print(best)

10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

bestPost = Post.objects.all().order_by('-rating').values('dateCreation', 'author__authorUser__username', 'rating', 'title')[0]
print(bestPost)

11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

coms = Comment.objects.filter(commentPost = Post.objects.all().order_by('-rating')[0]).values('dateCreation', 'commentUser__username', 'rating', 'text')
print(coms)